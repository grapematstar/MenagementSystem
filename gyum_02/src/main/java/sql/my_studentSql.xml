<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gyum_02.my_student">
	<select id="my_student_classinfo" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_ClassDTO">
		select * from class
		where class_idx = #{class_idx}
	</select>
	<select id="my_student_getAllStudentClassInfo" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_ClassDTO">
		select class_idx, subject_num, class_startdate, class_enddate, classroom, class_day, class_time, class_subject, tea_idx, class_price, class_max_student
		from (select rownum as rnum, a.*
		from (select * from class 
		where
		<foreach item="list" collection="list" separator="or">
		class_idx = #{list}
		</foreach>
		order by class_enddate desc, class_startdate desc)a)b
		where rnum<![CDATA[>=]]>((#{cp}-1)*10)+1 and rnum<![CDATA[<=]]>#{cp}*10
	</select>
	<select id="my_student_getAllStudentClassInfo_eval" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_ClassDTO">
		select class_idx, subject_num, class_startdate, class_enddate, classroom, class_day, class_time, class_subject, b.tea_name
		from (select rownum as rnum, a.*, tea_name
		from (select * from class 
		where (
		<foreach item="list" collection="list" separator="or">
		class_idx = #{list}
		</foreach>
		) and class_enddate <![CDATA[<=]]>#{today}
		order by class_enddate desc, class_startdate desc)a, teacher
        where teacher.tea_idx = a.tea_idx)b
		where rnum<![CDATA[>=]]>((#{cp}-1)*10)+1 and rnum<![CDATA[<=]]>#{cp}*10
	</select>
	<select id="my_student_getAllTeacherClassInfo" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_ClassDTO">
		select * 
		from (select rownum as rnum, a.*
		from (select * from class 
		where tea_idx = #{tea_idx}
		order by class_startdate desc, class_enddate desc)a)b
		where rnum<![CDATA[>=]]>((#{cp}-1)*10)+1 and rnum<![CDATA[<=]]>#{cp}*10
	</select>
	<select id="my_student_allClassInfo" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_ClassDTO">
		select a.*, tea_name
		from
		(select * from class
		where class_enddate<![CDATA[>]]>#{today}
		<if test="search != null">
			and class_subject like #{search}
		</if>
		order by class_startdate desc, class_enddate desc)a, teacher
		where a.tea_idx = teacher.tea_idx
	</select>
	<select id="my_student_subject_num" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_SubjectDTO">
		select subject_num
		from subject_num
		where subject_name = #{subject_name}
	</select>
	<select id="my_student_subject" parameterType="Map" resultType="String">
		select subject_name from subject_num
		where subject_num = #{subject_num}
	</select>
	<select id="my_student_subjectAll" resultType="String">
		select subject_name
		from subject_num
		order by subject_num asc
	</select>
	<select id="my_student_evalQuestion" resultType="gyum_02.my_student.model.my_stu_ClassEvalDTO">
		select * from class_eval_question
		order by c_e_q_idx asc
	</select>
	<insert id="my_student_insert_evalAnswer" parameterType="gyum_02.my_student.model.my_stu_ClassEvalAnswerDTO">
		insert into class_eval
		values(#{class_idx}, #{tea_idx}, #{stu_idx}, #{c_e_a1}, #{c_e_a2}, #{c_e_a3}, #{c_e_a4}, #{c_e_a5}, #{c_e_note}, #{c_e_fix}, sysdate)
	</insert>
	<select id="my_student_existEvalAnswer" parameterType="Map" resultType="Integer">
		select count(*) from class_eval
		where class_idx=#{class_idx} and stu_idx=#{stu_idx}
	</select>
	<select id="my_student_fixEvalAnswer" parameterType="Map" resultType="Integer">
		select c_e_fix from class_eval
		where class_idx=#{class_idx} and stu_idx=#{stu_idx}
	</select>
	<update id="my_student_doneEvalAnswer" parameterType="Map">
		update class_eval
		set c_e_fix = 1
		where class_idx=#{class_idx} and stu_idx=#{stu_idx}
	</update>
	<update id="my_student_update_evalAnswer" parameterType="gyum_02.my_student.model.my_stu_ClassEvalAnswerDTO">
		update class_eval
		set c_e_a1 = #{c_e_a1}, c_e_a2 = #{c_e_a2}, c_e_a3 = #{c_e_a3}, c_e_a4 = #{c_e_a4}, c_e_a5 = #{c_e_a5}, c_e_note = #{c_e_note} 
		where class_idx=#{class_idx} and stu_idx=#{stu_idx}
	</update>
	<select id="my_student_getEvalAnswer" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_ClassEvalAnswerDTO">
		select * from class_eval
		where class_idx = #{class_idx} and stu_idx = #{stu_idx}
	</select>
	<select id="my_student_getClassIdx" parameterType="Map" resultType="Integer">
		select class_idx from class_student
		where stu_idx = #{stu_idx}
		order by class_idx desc
	</select>
	<select id="my_student_getAttendList" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_AttendDTO">
		select attend_date, a_a_idx
		from attend
		where class_idx=#{class_idx} and stu_idx=#{stu_idx} and attend_date<![CDATA[>=]]>#{startdate} and attend_date<![CDATA[<=]]>#{enddate}
	</select>
	<insert id="my_student_timetable_set" parameterType="gyum_02.my_student.model.my_stu_TimetableDTO">
		insert into timetable
		values(#{stu_idx}, #{class_idx})
	</insert>
	<delete id="my_student_timetable_delete" parameterType="Map">
		delete from timetable
		where stu_idx = #{stu_idx}
	</delete>
	<select id="my_student_timetable_get" parameterType="Map" resultType="Integer">
		select class_idx from timetable
		where stu_idx = #{stu_idx}
	</select>
	<select id="my_student_getClassInfo_dayandtime" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_ClassDTO">
		select class_idx, class_day, class_time, class_subject
		from class
		where class_idx = #{class_idx}
	</select>
	<select id="my_student_getClassSubject" parameterType="Map" resultType="String">
		select class_subject
		from class
		where class_idx = #{class_idx}
	</select>
	<select id="my_student_getAttendance" parameterType="Map" resultType="String">
		select a_a_attendance
		from attend_attendance
		where a_a_idx = #{a_a_idx}
	</select>
	<select id="my_student_getClassPeriod" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_ClassDTO">
		select class_startdate, class_enddate
		from class
		where class_idx = #{class_idx}
	</select>
	<select id="my_student_getStudentName" parameterType="Map" resultType="String">
		select stu_name
		from student
		where stu_idx = #{stu_idx}
	</select>
	<select id="my_student_getSubjectInfoAll" resultType="gyum_02.my_student.model.my_stu_SubjectDTO">
		select *
		from subject_num
		order by subject_num asc
	</select>
	<select id="my_teacher_getClassStudentNumber" parameterType="Map" resultType="Integer">
		select count(*)
		from class_student
		where class_idx = #{class_idx}
	</select>
	<select id="my_teacher_getClassEvalList" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_ClassEvalAnswerDTO">
		select *
		from class_eval
		where class_idx = #{class_idx} and c_e_fix = 1
		order by c_e_writedate asc
	</select>
	<select id="my_stu_getMyLetterList" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_LetterDTO">
		select * 
		from (select rownum as rnum, a.*
		from (select letter_idx, letter_subject, letter_sender, letter_senddate
		from letter
		where letter_sendee = #{letter_sendee}
		order by letter_senddate desc)a)b
		where rnum<![CDATA[>=]]>((#{cp}-1)*5)+1 and rnum<![CDATA[<=]]>#{cp}*5
	</select>
	<select id="my_stu_getMySendLetterList" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_LetterDTO">
		select * 
		from (select rownum as rnum, a.*
		from (select letter_idx, letter_subject, letter_sendee, letter_senddate
		from letter
		where letter_sender = #{letter_sender}
		order by letter_senddate desc)a)b
		where rnum<![CDATA[>=]]>((#{cp}-1)*5)+1 and rnum<![CDATA[<=]]>#{cp}*5
	</select>
	<select id="my_stu_getNoReadLetterList" parameterType="Map" resultType="Integer">
		select letter_idx
		from (select * 
		from (select rownum as rnum, a.*
		from (select letter_idx, letter_subject, letter_sender, letter_senddate, letter_readdate
		from letter
		where letter_sendee = #{letter_sendee}
		order by letter_senddate desc)a)b
		where rnum<![CDATA[>=]]>((#{cp}-1)*5)+1 and rnum<![CDATA[<=]]>#{cp}*5)c
		where letter_senddate<![CDATA[>]]>letter_readdate
	</select>
	<select id="my_stu_getOneLetterContent" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_LetterDTO">
		select letter_subject, letter_content, letter_sender, letter_sendee, letter_senddate, letter_readdate
		from letter
		where letter_idx = #{letter_idx}
	</select>
	<update id="my_stu_letter_read" parameterType="Map">
		update letter
		set letter_readdate = sysdate
		where letter_idx = #{letter_idx}
	</update>
	<select id="my_stu_noReadLetterNumber" parameterType="Map" resultType="Integer">
		select count(*)
		from letter
		where letter_sendee = #{letter_sendee} and letter_senddate<![CDATA[>]]>letter_readdate
	</select>
	<select id="my_student_getTeacherClassInfo_timetable" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_ClassDTO">
		select class_idx, class_day, class_time, class_subject 
		from class
		where tea_idx = #{tea_idx} and class_startdate <![CDATA[<=]]> #{today} and class_enddate <![CDATA[>=]]> #{today} 
	</select>
	<select id="my_teacher_getClassStudentIdxList" parameterType="Map" resultType="Integer">
		select stu_idx
		from class_student
		where class_idx = #{class_idx}
	</select>
	<select id="my_teacher_getStudentIdxOrderByName" parameterType="List" resultType="gyum_02.my_student.model.my_stu_StudentDTO">
		select stu_idx, stu_name
		from student
		where
		<foreach item="list" collection="list" separator="or">
		stu_idx = #{list}
		</foreach>
		order by stu_name asc
	</select>
	<select id="my_teacher_getStudentAttendList" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_AttendDTO">
		select class_idx, student.stu_idx as stu_idx, attend_date, a_a_idx, attend_note
		from attend, student
		where class_idx = #{class_idx} and student.stu_idx = attend.stu_idx and attend_date<![CDATA[>=]]>#{datestart} and attend_date<![CDATA[<=]]>#{dateend}
		order by stu_name asc, attend_date asc		
	</select>
	<select id="my_teacher_getStudentAttendDate" parameterType="Map" resultType="Integer">
		select distinct(attend_date)
		from attend
		where class_idx = #{class_idx} and attend_date<![CDATA[>=]]>#{datestart} and attend_date<![CDATA[<=]]>#{dateend}
		order by attend_date asc
	</select>
	<select id="my_teacher_getIndividualAttendList" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_AttendDTO">
		select *
		from attend
		where class_idx = #{class_idx} and stu_idx = #{stu_idx} and attend_date<![CDATA[>=]]>#{datestart} and attend_date<![CDATA[<=]]>#{dateend}
		order by attend_date asc
	</select>
	<select id="my_student_getParIdx" parameterType="Map" resultType="Integer">
		select par_idx
		from student
		where stu_idx = #{stu_idx}
	</select>
	<insert id="my_letter_send" parameterType="gyum_02.my_student.model.my_stu_LetterDTO">
		insert into letter
		values(letter_letter_idx.nextval, #{letter_subject}, #{letter_content}, #{letter_sender}, #{letter_sendee}, sysdate, '10000101')
	</insert>
	<select id="my_letter_getTotalNumber" parameterType="Map" resultType="Integer">
		select count(*)
		from letter
		where letter_sendee = #{letter_sendee}
	</select>
	<select id="my_sendletter_getTotalNumber" parameterType="Map" resultType="Integer">
		select count(*)
		from letter
		where letter_sender = #{letter_sender}
	</select>
	<select id="my_index_getMyLetter" parameterType="Map" resultType="gyum_02.my_student.model.my_stu_LetterDTO">
		select letter_idx, letter_subject, letter_sender, letter_senddate 
		from (select rownum as rnum, a.*
		from (select *
		from letter
		where letter_sendee = #{letter_sendee}
		order by letter_senddate desc)a)b
		where rnum<![CDATA[<=]]>5
	</select>
</mapper>